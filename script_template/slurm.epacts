#!/bin/bash
#SBATCH --time=72:00:00
#SBATCH --output=%x.run_%a.stdout
#SBATCH --error=%x.run_%a.stderr

# Usage:
# 0. Modify /path/to/VICTOR/run_epacts according to your EPACTS installation.
# 1. Optionally, add #SBATCH parameters above. Such as --account --partition.
# 2. Change the "EPACTS parameters", "Main Parameters" and "Other Programs" below.
# 3. Execute this script by the command "victor.sbatch --array=1 slurm.epacts".

# Caveats:
# 1. Population structure detected by KING is not used. You have to add covariates in $PED, $COV and $ARG.

# Check Path.
VICTOR_PATH=`which vGrp | sed 's;/vGrp$;;'`
if [ "$VICTOR_PATH" == "" ]; then echo >&2 'slurm.all_steps: !!! Error: path to VICTOR is not set'; exit 1; fi

# ----------------------------------------------------- beginning of parameters -----------------------------------------------------------------

# EPACTS parameters. They will be used only for the $ARG below. 
export PED=EPACT_pedigree_file.ped # must be named something.ped; phenotype and covariates should not have missing values.
export KIN=PERCH.data_c.kinf       # created by "epacts make-kin --vcf $OUT.data_c.vcf.gz --min-maf 0.01 --min-CallRate 0.95 --out $OUT.data_c.kinf".
export PHE=Phenotype_name          # match with the column header in EPACT_pedigree_file.ped.
export COV=                        # covariate options, e.g. COV="--cov AGE --cov SEX".

# Main Parameters.
export CHF=$VICTOR_PATH/script_template/chr_noM    # mandatory. Chromosomes to be analyzed.
export OUT=PERCH                                   # mandatory. Match to $OUT in slurm.all_steps.
export ARG="--pheno $PHE --test q.wilcox"          # mandatory. EPACTS arguments. Do not use "--ped $PED", because I will handle it later!
export GBA=                                        # optional. Guilt-by-association score file.
export RMS=                                        # optional. parameters for removing samples. (e.g., RMS="--rm-ind+=File_of_SeqIDs_To_Remove").
export VGR=                                        # optional. parameters for vGrp

# Other Programs. Ask your computer manager about how to use GNU parallel.
module load parallel

# ----------------------------------------------------------- end of parameters -----------------------------------------------------------------

# Check parameters
export TEST=`echo $ARG | sed 's/--/\n/g' | grep '^test ' | awk '{print $2}'`
if [ "$TEST" == "" ]; then echo >&2 'slurm.epacts: !!! Error: --test not detected in $ARG.'; exit 1; fi

# Begin of job
JOB_DIR=`pwd`
JOB_LOG=$JOB_DIR/$SLURM_JOB_NAME.run_${SLURM_ARRAY_TASK_ID}
if [ -s $JOB_DIR/$SLURM_JOB_NAME ]; then cp $JOB_DIR/$SLURM_JOB_NAME $JOB_DIR/$SLURM_JOB_NAME.run_${SLURM_ARRAY_TASK_ID}.script; fi
echo "# $(date)"                                             > $JOB_LOG.start
echo "# SLURM_JOBID = $SLURM_JOBID"                         >> $JOB_LOG.start
echo "# SLURM_NODELIST = $SLURM_NODELIST"                   >> $JOB_LOG.start
echo "# To abort this job: cat $JOB_LOG.start | bash"       >> $JOB_LOG.start
echo "scancel $SLURM_JOBID"                                 >> $JOB_LOG.start

OS=`uname | tr '[:upper:]' '[:lower:]'`
if   [[ "$OS" == 'linux' ]]; then  PRFX=`mktemp --tmpdir=. XXXXXXXXXX` && PRFX=${PRFX:2}
elif [[ "$OS" == 'darwin' ]]; then PRFX=`mktemp            XXXXXXXXXX`
else echo >&2 'slurm.all_steps: !!! unknown OS '$OS; exit 1; fi
export STDERR_MUTEX=$PRFX

# run analysis on each chr
if [ -s $OUT.sample_rm       ]; then export RMS="$RMS --rm-ind+=$OUT.sample_rm"      ; fi
if [ -s $OUT.2nd.rel_problem ]; then export RMS="$RMS --rm-ind+=$OUT.2nd.rel_problem"; fi
if [ `grep ^--rm-ind par.txt|wc -l` -gt 0 ]; then export RMS="$RMS `grep rm-ind par.txt | cut -f 1`"; fi
cat `echo $RMS | tr ' ' '\n' | sed 's/ //g;s/^--rm-ind+=//;s/^--rm-ind=//;s/^--rm-ind//' | tr , '\n' | grep -v ^$` | grep -v ^# | sort | uniq > $PRFX.1.tmp
awk 'NR==FNR{a[$1];next} !($1 in a){print}' $PRFX.1.tmp $PED > $OUT.samples.$TEST.ped
my_func() { rm -f $OUT.chr$1.ep.*;
            vGrp $VGR $OUT.chr$1.qc.ann.del.gz --epacts > $OUT.chr$1.ep.gr;
            VCF=$OUT.chr$1.qc.vcf.gz ARG="$ARG --ped $OUT.samples.$TEST.ped --groupf $OUT.chr$1.ep.gr --sepchr" OUT=$OUT.chr$1.ep run_epacts; }
export -f my_func
parallel -j 1 -a $CHF my_func

# merge results from all chromosomes into one file
if [ -s "$GBA" ]; then
  grep '#CHROM' `/bin/ls $OUT.chr*.ep.epacts | head -1` | awk '{print $4,$1,$2 }' |\
  sed 's/$/\tEPmlp\tGBA/' | sed 's/MARKER_ID/Gene/' | sed 's/BEGIN/Begin_POS/' | tr ' ' '\t' > $OUT.results_$TEST
  cat $OUT.chr*.ep.epacts | grep -v '#CHROM' | grep -v $'\tNA$' | awk '{print $4,$1,$2,-log($10)/log(10) }' |\
  sort -k 4,4 -r -g | sed 's/[^_]*_//' > $PRFX.2.tmp
  awk 'FNR==NR {a[$1]=$2;next} {$1 in a ? $5=a[$1] : $5=0} {print}' $GBA $PRFX.2.tmp | tr ' ' '\t' >> $OUT.results_$TEST
else
  grep '#CHROM' `/bin/ls $OUT.chr*.ep.epacts | head -1` | awk '{print $4,$1,$2 }' |\
  sed 's/$/\tEPmlp/' | sed 's/MARKER_ID/Gene/' | sed 's/BEGIN/Begin_POS/' | tr ' ' '\t' > $OUT.results_$TEST
  cat $OUT.chr*.ep.epacts | grep -v '#CHROM' | grep -v $'\tNA$' | awk '{print $4,$1,$2,-log($10)/log(10) }' |\
  sort -k 4,4 -r -g | sed 's/[^_]*_//' | tr ' ' '\t' >> $OUT.results_$TEST
fi

# remove files
my_func() { rm $OUT.chr$1.ep.* ; }
export -f my_func
parallel -j 1 -a $CHF my_func

# All done.
rm -f $PRFX*
echo '# '$(date) > $JOB_LOG.stop
