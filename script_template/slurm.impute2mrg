#!/bin/bash
#SBATCH --time=72:00:00
#SBATCH --output=%x.%a.stdout
#SBATCH --error=%x.%a.stderr
#SBATCH --array=1-25
#SBATCH --ntasks-per-node=1

# About:
# This script submits MULTIPLE jobs to merge IMPUTE2 output ($CHR.vcf) with sequencing data ($SEQ.chr$CHR.qc.vcf), and write to $OUT.chr$CHR.mrg.qc.vcf.
# This file is more readable if the text editor or terminal width is at least 160 characters.
# Comments starting with ### are suggested manual operations.

# Usage:
# 1. Add /path/to/VICTOR to your PATH.
# 2. Copy this scrip to a working directory where you have write permissions to. Optionally, put a par.txt in the same working directory if necessary.
# 3. Optionally, add #SBATCH options above. Such as --account --partition --mail-user --mail-type.
# 4. Set parameters including "Set PATH" and "Main Parameters" .
# 5. Submit jobs by "victor.sbatch slurm.impute2mrg" to analyze all chromosomes; or "victor.sbatch --array=# slurm.impute2mrg" to analyze one chromosome.

# Commands to check errors after running a job (please replace # with the SLURM_ARRAY_TASK_ID):
#   ERROR_TEXT="error\|throwing\|exception\|what()\|Killed\|slurmstepd\|NODE_FAIL\|Broken pipe\|too many arguments\|segmentation\|reindex\|Aborted"
#   grep -i "$ERROR_TEXT" slurm.impute2mrg.*.stderr
# Commands to check warnings:
#   grep -i warning slurm.impute2mrg.*.stderr
# Commands to see what have been done:
#   grep -i completed slurm.impute2mrg.*.stderr

# Tips:
# It would be good to run this on one chromosome first, find the samples that have excessively missing rate (>0.05), then set the $RMS and QC all chromosomes.

# ----------------------------------------------------------------- beginning_of_parameters -----------------------------------------------------------------

# Set PATH.
# If you have not added VICTOR to your PATH, un-comment the following line and replace /path/to; otherwise, no need to do anything.
#   export PATH=/path/to/VICTOR:$PATH

# Check whether PATH is set correctly.
VICTOR_PATH=`which vAnnGene | sed 's;/vAnnGene$;;'`
GENOME_NAME=`vAnnGene -h | grep genome | sed 's;/};;' | sed 's;.*/;;'`
if [ "$SLURM_JOB_NAME" == "" ]; then SLURM_JOB_NAME=`basename "$0"`; fi
if [ "$VICTOR_PATH" == "" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: path to VICTOR is not set'; exit 1; fi
if [ "$GENOME_NAME" == "" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: genome assembly is not set'; exit 1; fi

# What to do. Select successive major steps (0,1,2,3,4) below. Minor steps (a,b,c,d,e) are optional. Value is either yes or no.
STEP_0=yes # Step 0  : Rename imputed VCF files and make tabix index.
STEP_1=yes # Step 1  : Variant-wise quality control and basic annotations (MaxAF, BayesDel, func consequence)
STEP2A=no  # Step 2.a: Cat *.imp.qc.vcf into one VCF file
STEP2B=yes # Step 2.b: Merge with other data

# Main Parameters. Values are filenames or program options. Leave it blank if there's nothing to set or you don't know what to do.
# If an input file is not in the working directory, use full path or relative path. Remember to quote if the argument contains a space.
# Basic parameters
export SEQ=                               # mandatory, sequencing vcf file prefix. Full name is $SEQ.chr$CHR.qc.vcf.gz.
export OUT=VICTOR                         # mandatory, output prefix
export SPL=../files/samples.txt           # mandatory, sample file. Sample ID should not contain an equals sign (=) or semicolon (;) or comma (,).
export PED=../files/pedigrees.txt         # optional, pedigree file.
export RMS=                               # optional. Parameters for removing samples (e.g., RMS="--rm-ind+=File_of_SeqIDs_To_Remove").
# For step 1
export AN1=                               # optional. Parameters for additional annotations by vAnnDel. See "Note C" below.
export AN2=                               # optional. Parameters for additional annotations by vAnnDel. See "Note C" below.
export AN3=                               # optional. Parameters for additional annotations by vAnnDel. See "Note C" below.
export AN4=                               # optional. Parameters for additional annotations by vAnnDel. See "Note C" below.
export AN5=                               # optional. Parameters for additional annotations by vAnnDel. See "Note C" below.
export QC1=                               # optional. Parameters for quality control by vQC on each chromosome. See "Note D" below.
export VAM=                               # optional. parameters for MaxAF annotation by vAnnDel.
export VAR_MISS=                          # Variant-wise missing rate cutoff. Don't set it >0.02. Default is 0.01. VAR_MISS=1 for no missing rate filter.

# Other Programs. Ask your computer manager about how to use GNU parallel, tabix, PLINK 1.9, KING, and GATK.
# If GNU parallel or GATK complains about not being able to write in /tmp, un-comment the next line and add -Djava.io.tmpdir=./ to $GATK.
# export TMPDIR=./
# module load parallel
# module load tabix
export GATK_APP=/path/to/gatk.jar
export R_GENOME=/path/to/reference_genome.fasta
export GATK="java -Xmx2g -jar $GATK_APP -R $R_GENOME"
export PLINK19="plink_1.9 --allow-no-sex"
export KING=king
export JAVA=java

# -------------------------------------------------------------------- end_of_parameters --------------------------------------------------------------------

# Check parameters
if [ "$OUT" == "" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: OUT in the "Main Parameters" cannot be empty'; exit 1; fi
if [ "$SPL" == "" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: SPL in the "Main Parameters" cannot be empty'; exit 1; fi
if [ "$SPL" != "" ] && [ ! -s "$SPL" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: '$SPL' not exist or empty.'; exit 1; fi
if [ "$PED" != "" ] && [ ! -s "$PED" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: '$PED' not exist or empty.'; exit 1; fi
if [ "$VAR_MISS" != "" ]; then export QC1="--filt-miss-rate=$VAR_MISS $QC1"; fi
if   [[ "`uname | tr '[:upper:]' '[:lower:]'`" == linux  ]]; then
  export ZCAT=zcat
  export NCPU=`nproc`
  export MEM_TOTAL=`free -g | grep Mem | awk '{ print $7 }'`
elif [[ "`uname | tr '[:upper:]' '[:lower:]'`" == darwin ]]; then
  export ZCAT=gzcat
  export NCPU=`sysctl -n hw.ncpu`
  FREE_BLOCKS=$(vm_stat | grep free | awk '{ print $3 }' | sed 's/\.//')
  INACTIVE_BLOCKS=$(vm_stat | grep inactive | awk '{ print $3 }' | sed 's/\.//')
  SPECULATIVE_BLOCKS=$(vm_stat | grep speculative | awk '{ print $3 }' | sed 's/\.//')
  FREE=$((($FREE_BLOCKS+SPECULATIVE_BLOCKS)*4096/1048576/1024))
  INACTIVE=$(($INACTIVE_BLOCKS*4096/1048576/1024))
  export MEM_TOTAL=$((($FREE+$INACTIVE)))
else
  echo >&2 $SLURM_JOB_NAME': !!! Error: unknown OS.'
  exit 1
fi
if [ "$GATK" == "" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: GATK not defined. Aborted at IMPUTE.'; exit 1; fi
if [[ "$GATK" == *"/path/to/"* ]]; then echo >&2 $SLURM_JOB_NAME': !!! Error: GATK not defined. Aborted at IMPUTE.'; exit 1; fi

# Begin of job
if [ "$SLURM_ARRAY_TASK_ID" == "" ]; then echo >&2 $SLURM_JOB_NAME': !!! Error: SLURM_ARRAY_TASK_ID not defined'; exit 1; fi
if   [ $SLURM_ARRAY_TASK_ID == 1  ]; then CHR=1
elif [ $SLURM_ARRAY_TASK_ID == 2  ]; then CHR=2
elif [ $SLURM_ARRAY_TASK_ID == 3  ]; then CHR=3
elif [ $SLURM_ARRAY_TASK_ID == 4  ]; then CHR=4
elif [ $SLURM_ARRAY_TASK_ID == 5  ]; then CHR=5
elif [ $SLURM_ARRAY_TASK_ID == 6  ]; then CHR=6
elif [ $SLURM_ARRAY_TASK_ID == 7  ]; then CHR=7
elif [ $SLURM_ARRAY_TASK_ID == 8  ]; then CHR=8
elif [ $SLURM_ARRAY_TASK_ID == 9  ]; then CHR=9
elif [ $SLURM_ARRAY_TASK_ID == 10 ]; then CHR=10
elif [ $SLURM_ARRAY_TASK_ID == 11 ]; then CHR=11
elif [ $SLURM_ARRAY_TASK_ID == 12 ]; then CHR=12
elif [ $SLURM_ARRAY_TASK_ID == 13 ]; then CHR=13
elif [ $SLURM_ARRAY_TASK_ID == 14 ]; then CHR=14
elif [ $SLURM_ARRAY_TASK_ID == 15 ]; then CHR=15
elif [ $SLURM_ARRAY_TASK_ID == 16 ]; then CHR=16
elif [ $SLURM_ARRAY_TASK_ID == 17 ]; then CHR=17
elif [ $SLURM_ARRAY_TASK_ID == 18 ]; then CHR=18
elif [ $SLURM_ARRAY_TASK_ID == 19 ]; then CHR=19
elif [ $SLURM_ARRAY_TASK_ID == 20 ]; then CHR=20
elif [ $SLURM_ARRAY_TASK_ID == 21 ]; then CHR=21
elif [ $SLURM_ARRAY_TASK_ID == 22 ]; then CHR=22
elif [ $SLURM_ARRAY_TASK_ID == 23 ]; then CHR=X
elif [ $SLURM_ARRAY_TASK_ID == 24 ]; then CHR=Y
elif [ $SLURM_ARRAY_TASK_ID == 25 ]; then CHR=M
else echo "wrong SLURM_ARRAY_TASK_ID $SLURM_ARRAY_TASK_ID"; exit; fi

JOB_DIR=`pwd`
JOB_LOG=$JOB_DIR/$SLURM_JOB_NAME.${SLURM_ARRAY_TASK_ID}
if [ -s $JOB_DIR/$SLURM_JOB_NAME ]; then cp $JOB_DIR/$SLURM_JOB_NAME $JOB_LOG.script; fi
if [ -s par.txt ]; then cp par.txt $JOB_LOG.par; fi
echo "# $(date)"                                             > $JOB_LOG.start
echo "# SLURM_JOBID = $SLURM_JOBID"                         >> $JOB_LOG.start
echo "# SLURM_NODELIST = $SLURM_NODELIST"                   >> $JOB_LOG.start
echo "# To abort this job: cat $JOB_LOG.start | bash"       >> $JOB_LOG.start
echo "scancel ${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID}" >> $JOB_LOG.start
export ERROR_TEXT="error\|throwing\|exception\|what()\|Killed\|slurmstepd\|NODE_FAIL\|Broken pipe\|too many arguments\|segmentation\|reindex\|Aborted"

OS=`uname | tr '[:upper:]' '[:lower:]'`
if   [[ "$OS" == 'linux' ]]; then  PRFX=`mktemp --tmpdir=. XXXXXXXXXX` && PRFX=${PRFX:2}
elif [[ "$OS" == 'darwin' ]]; then PRFX=`mktemp            XXXXXXXXXX`
else echo "unknown OS $OS"; exit 1; fi
export STDERR_MUTEX=$PRFX

# Rename
if [ "$STEP_0" == yes ]; then
  mv $CHR.vcf.gz     $OUT.chr$CHR.imp.vcf.gz
  mv $CHR.vcf.gz.csi $OUT.chr$CHR.imp.vcf.gz.csi
  tabix -f -p vcf    $OUT.chr$CHR.imp.vcf.gz
  if [ `grep -i "$ERROR_TEXT" $JOB_LOG.stderr | wc -l` -gt 0 ]; then echo >&2 $SLURM_JOB_NAME': !!! Aborted at STEP_0'; exit 1; fi
  echo >&2 $SLURM_JOB_NAME': STEP_0 (rename) completed'
fi

# QC
if [ "$STEP_1" == yes ]; then
  INP=$OUT.chr$CHR.imp.vcf.gz SPL=$SPL PED=$PED \
  VAM=$VAM AN1=$AN1 AN2=$AN2 AN3=$AN3 AN4=$AN4 AN5=$AN5 \
  QC1="$RMS --rm-ii-MaxAF-lt=0 --sample-qc=$OUT.chr$CHR.imp.sample_qc --log=$OUT.chr$CHR.imp.qc.log.gz $QC1" \
  STEP1_ONLY=yes victor_by_chr
  if [ `grep -i "$ERROR_TEXT" $JOB_LOG.stderr | wc -l` -gt 0 ]; then echo >&2 $SLURM_JOB_NAME': !!! Aborted at STEP_1'; exit 1; fi
  echo >&2 $SLURM_JOB_NAME': STEP_1 (QC) completed'
fi

# Cat
if [ "$STEP2A" == yes ]; then
  $JAVA -cp $GATK_APP org.broadinstitute.gatk.tools.CatVariants \
    -R $R_GENOME \
    --assumeSorted \
    -V $OUT.chr1.imp.qc.vcf.gz \
    -V $OUT.chr2.imp.qc.vcf.gz \
    -V $OUT.chr3.imp.qc.vcf.gz \
    -V $OUT.chr4.imp.qc.vcf.gz \
    -V $OUT.chr5.imp.qc.vcf.gz \
    -V $OUT.chr6.imp.qc.vcf.gz \
    -V $OUT.chr7.imp.qc.vcf.gz \
    -V $OUT.chr8.imp.qc.vcf.gz \
    -V $OUT.chr9.imp.qc.vcf.gz \
    -V $OUT.chr10.imp.qc.vcf.gz \
    -V $OUT.chr11.imp.qc.vcf.gz \
    -V $OUT.chr12.imp.qc.vcf.gz \
    -V $OUT.chr13.imp.qc.vcf.gz \
    -V $OUT.chr14.imp.qc.vcf.gz \
    -V $OUT.chr15.imp.qc.vcf.gz \
    -V $OUT.chr16.imp.qc.vcf.gz \
    -V $OUT.chr17.imp.qc.vcf.gz \
    -V $OUT.chr18.imp.qc.vcf.gz \
    -V $OUT.chr19.imp.qc.vcf.gz \
    -V $OUT.chr20.imp.qc.vcf.gz \
    -V $OUT.chr21.imp.qc.vcf.gz \
    -V $OUT.chr22.imp.qc.vcf.gz \
    -out $OUT.imp.qc.vcf.gz \
    &> $OUT.imp.qc.cat.log
  echo >&2 $SLURM_JOB_NAME': STEP2A (cat) completed'
fi

# Merge
if [ "$STEP2B" == yes ]; then
  # merge with other data (WES)
  export NT_BY_CPU=`echo $((NCPU-2>1?NCPU-2:1))`
  export NT_BY_MEM=`expr $MEM_TOTAL / 2`
  export NUM_THREADS=`echo $((NT_BY_CPU<NT_BY_MEM?NT_BY_CPU:NT_BY_MEM))`
  if [ "$NUM_THREADS" -lt 1 ]; then export NUM_THREADS=1; fi
  echo >&2 "$SLURM_JOB_NAME: calculated NT_BY_CPU=$NT_BY_CPU NT_BY_MEM=$NT_BY_MEM"
  $GATK -T CombineVariants --num_threads $NUM_THREADS \
        --genotypemergeoption UNSORTED \
        --variant:seq    $SEQ.chr$CHR.qc.vcf.gz \
        --variant:impute $OUT.chr$CHR.imp.qc.vcf.gz \
        --filteredrecordsmergetype KEEP_IF_ANY_UNFILTERED \
        -o $OUT.chr$CHR.mrg.vcf.gz \
        &> $OUT.chr$CHR.mrg.log
  if [ `grep -i "$ERROR_TEXT" $JOB_LOG.stderr | wc -l` -gt 0 ]; then echo >&2 $SLURM_JOB_NAME': !!! Aborted at STEP2B_part_1'; exit 1; fi
  echo >&2 $SLURM_JOB_NAME': STEP2B_part_1 (merge) completed'

  # run vSPLIT
  INP=$OUT.chr$CHR.mrg.vcf.gz SPL=$SPL PED=$PED \
  VAM=$VAM AN1=$AN1 AN2=$AN2 AN3=$AN3 AN4=$AN4 AN5=$AN5 \
  QC1="--do-nothing" \
  STEP1_ONLY=yes victor_by_chr
  if [ `grep -i "$ERROR_TEXT" $JOB_LOG.stderr | wc -l` -gt 0 ]; then echo >&2 $SLURM_JOB_NAME': !!! Aborted at STEP2B_part_2'; exit 1; fi
  echo >&2 $SLURM_JOB_NAME': STEP2B_part_2 (decompose) completed'
fi

# All completed.
echo >&2 $SLURM_JOB_NAME": impute2mrg_${SLURM_ARRAY_TASK_ID} all completed"
rm -f $PRFX*
echo '# '$(date) > $JOB_LOG.stop
